// Broadcasts.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏

class BroadcastsPage {
    constructor() {
        this.courses = [];
        this.lessons = [];
        this.recipients = [];
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ app.js
    }

    async init() {
        await this.loadCourses();
        this.setupEventListeners();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
        const broadcastForm = document.getElementById('broadcastForm');
        if (broadcastForm) {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const newForm = broadcastForm.cloneNode(true);
            broadcastForm.parentNode.replaceChild(newForm, broadcastForm);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            newForm.addEventListener('submit', (e) => this.handleBroadcastSubmit(e));
        }
    }

    async loadCourses() {
        try {
            const response = await fetch('/api/courses');
            const data = await response.json();
            
            if (data.courses) {
                this.courses = data.courses;
                this.populateCourseSelect();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤', 'error');
        }
    }

    populateCourseSelect() {
        const courseSelect = document.getElementById('broadcastCourse');
        if (!courseSelect) return;

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
        courseSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã
        this.courses.forEach(course => {
            const option = document.createElement('option');
            option.value = course.id;
            option.textContent = course.title;
            courseSelect.appendChild(option);
        });
    }

    async loadBroadcastLessons() {
        const courseSelect = document.getElementById('broadcastCourse');
        const lessonSelect = document.getElementById('broadcastLesson');
        
        if (!courseSelect || !lessonSelect) return;

        const courseId = courseSelect.value;
        if (!courseId) {
            lessonSelect.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å</option>';
            return;
        }

        try {
            const response = await fetch(`/api/courses/${courseId}/lessons`);
            const data = await response.json();
            
            if (data.lessons) {
                this.lessons = data.lessons.sort((a, b) => a.order_num - b.order_num);
                this.populateLessonSelect();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–æ–≤', 'error');
        }
    }

    populateLessonSelect() {
        const lessonSelect = document.getElementById('broadcastLesson');
        if (!lessonSelect) return;

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏
        lessonSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫–∏
        this.lessons.forEach(lesson => {
            const option = document.createElement('option');
            option.value = lesson.id;
            option.textContent = `–£—Ä–æ–∫ ${lesson.order_num}: ${lesson.title}`;
            lessonSelect.appendChild(option);
        });
    }

    async updateBroadcastStats() {
        const courseSelect = document.getElementById('broadcastCourse');
        const lessonSelect = document.getElementById('broadcastLesson');
        const recipientsDiv = document.getElementById('broadcastRecipients');
        
        if (!courseSelect || !lessonSelect || !recipientsDiv) return;

        const courseId = courseSelect.value;
        const lessonId = lessonSelect.value;

        if (!courseId || !lessonId) {
            recipientsDiv.innerHTML = '<p>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π</p>';
            return;
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–¥–∞–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫
            const response = await fetch(`/api/broadcasts/recipients?courseId=${courseId}&lessonId=${lessonId}`);
            const data = await response.json();
            
            if (data.recipients) {
                this.recipients = data.recipients;
                this.displayRecipients();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π', 'error');
        }
    }

    displayRecipients() {
        const recipientsDiv = document.getElementById('broadcastRecipients');
        if (!recipientsDiv) return;

        if (this.recipients.length === 0) {
            recipientsDiv.innerHTML = '<p class="no-recipients">üéâ –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–¥–∞–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫!</p>';
            return;
        }

        const course = this.courses.find(c => c.id === document.getElementById('broadcastCourse').value);
        const lesson = this.lessons.find(l => l.id === document.getElementById('broadcastLesson').value);

        let html = `
            <div class="recipients-summary">
                <p><strong>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong></p>
                <p>–ö—É—Ä—Å: <strong>${course?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong></p>
                <p>–£—Ä–æ–∫: <strong>${lesson ? `–£—Ä–æ–∫ ${lesson.order_num}: ${lesson.title}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong></p>
                <p>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <strong>${this.recipients.length}</strong></p>
            </div>
            <div class="recipients-list">
                <p><strong>üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</strong></p>
                <ul>
        `;

        this.recipients.forEach(recipient => {
            html += `<li>${recipient.name} (${recipient.city})</li>`;
        });

        html += '</ul></div>';
        recipientsDiv.innerHTML = html;
    }

    async handleBroadcastSubmit(e) {
        e.preventDefault();

        const courseId = document.getElementById('broadcastCourse').value;
        const lessonId = document.getElementById('broadcastLesson').value;
        const message = document.getElementById('broadcastMessage').value;

        if (!courseId || !lessonId || !message.trim()) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }

        if (this.recipients.length === 0) {
            showNotification('–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', 'warning');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        const submitButton = document.querySelector('#broadcastForm button[type="submit"]');
        const originalText = submitButton ? submitButton.textContent : '';
        if (submitButton) {
            submitButton.textContent = 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...';
            submitButton.disabled = true;
        }

        try {
            const response = await fetch('/api/broadcasts/send', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    courseId,
                    lessonId,
                    message: message.trim()
                })
            });

            const data = await response.json();

            if (data.success) {
                showNotification(`–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${data.sentCount} —Å—Ç—É–¥–µ–Ω—Ç–∞–º!`, 'success');
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                setTimeout(() => {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    if (window.Modals && window.Modals.close) {
                        window.Modals.close('broadcastModal');
                    } else if (window.closeModal) {
                        window.closeModal('broadcastModal');
                    } else {
                        const modal = document.getElementById('broadcastModal');
                        if (modal) {
                            modal.style.display = 'none';
                        }
                    }
                    
                    this.resetForm();
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—ã–ª–æ–∫
                    this.loadBroadcastHistory();
                }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
            } else {
                showNotification(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (submitButton) {
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }
        }
    }

    resetForm() {
        const form = document.getElementById('broadcastForm');
        if (form) {
            form.reset();
        }
        
        const recipientsDiv = document.getElementById('broadcastRecipients');
        if (recipientsDiv) {
            recipientsDiv.innerHTML = '<p>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π</p>';
        }
        
        this.recipients = [];
    }

    async loadBroadcastHistory() {
        try {
            const response = await fetch('/api/broadcasts/history');
            const data = await response.json();
            
            if (data.broadcasts) {
                this.displayBroadcastHistory(data.broadcasts);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫:', error);
        }
    }

    displayBroadcastHistory(broadcasts) {
        const tbody = document.getElementById('broadcastHistoryTableBody');
        if (!tbody) return;

        if (broadcasts.length === 0) {
            tbody.innerHTML = '<tr><td colspan="5" class="no-data">–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞</td></tr>';
            return;
        }

        tbody.innerHTML = broadcasts.map(broadcast => `
            <tr>
                <td>${new Date(broadcast.created_at).toLocaleString('ru-RU')}</td>
                <td>${broadcast.course?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                <td>–£—Ä–æ–∫ ${broadcast.lesson?.order_num || '?'}: ${broadcast.lesson?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
                <td>${broadcast.recipient_count || 0} / ${broadcast.sent_count || 0}</td>
                <td>${broadcast.message.length > 50 ? broadcast.message.substring(0, 50) + '...' : broadcast.message}</td>
            </tr>
        `).join('');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
function showBroadcastModal() {
    const modal = document.getElementById('broadcastModal');
    if (modal) {
        modal.style.display = 'block';
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (window.BroadcastsPage) {
            window.BroadcastsPage.loadCourses();
        }
    }
}

function loadBroadcastLessons() {
    if (window.BroadcastsPage) {
        window.BroadcastsPage.loadBroadcastLessons();
    }
}

function updateBroadcastStats() {
    if (window.BroadcastsPage) {
        window.BroadcastsPage.updateBroadcastStats();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.BroadcastsPage = new BroadcastsPage();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BroadcastsPage = window.BroadcastsPage || null; 