// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook Telegram –±–æ—Ç–∞
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node setup-webhook.js YOUR_BOT_TOKEN

const BOT_TOKEN = process.argv[2];
const WEBHOOK_URL = 'https://smj-lms.3451881.workers.dev/api/telegram/webhook';

if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node setup-webhook.js YOUR_BOT_TOKEN');
  process.exit(1);
}

async function setupWebhook() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞...');
    console.log(`üì° Webhook URL: ${WEBHOOK_URL}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: WEBHOOK_URL,
        allowed_updates: ['message', 'callback_query']
      })
    });

    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${result.description}`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', result.description);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...');
    const infoResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    const info = await infoResponse.json();
    
    if (info.ok) {
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
      console.log(`   URL: ${info.result.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`   –û—à–∏–±–∫–∏: ${info.result.last_error_message || '–Ω–µ—Ç'}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${info.result.pending_update_count || 0}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

setupWebhook(); 