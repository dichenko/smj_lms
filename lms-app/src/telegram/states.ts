// –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

export enum StudentState {
  // –ë–∞–∑–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  UNREGISTERED = 'unregistered',           // –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
  WELCOME = 'welcome',                     // –ü–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  DASHBOARD = 'dashboard',                 // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫—É—Ä—Å–∞–º–∏
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ–º
  COURSE_VIEW = 'course_view',             // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –∫—É—Ä—Å–∞
  AWAITING_SUBMISSION = 'awaiting_submission', // –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç—á–µ—Ç–∞
  REPORT_PENDING = 'report_pending',       // –û—Ç—á–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∞
  REPORT_REJECTED = 'report_rejected',     // –û—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω, –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
  LESSON_COMPLETED = 'lesson_completed',   // –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  COURSE_COMPLETED = 'course_completed',   // –í–µ—Å—å –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
  IDLE = 'idle'                           // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
}

export interface StudentStateData {
  state: StudentState;
  courseId?: string;          // ID —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞
  lessonId?: string;          // ID —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
  reportId?: string;          // ID —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
  lastActivity: string;       // Timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  context?: {                 // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    previousState?: StudentState;
    messageId?: number;       // ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    submissionAttempts?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–¥–∞—á–∏
  };
}

export class StudentStateMachine {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ KV
   */
  static async getState(kv: any, studentId: string): Promise<StudentStateData | null> {
    try {
      const stateStr = await kv.get(`student_state_${studentId}`);
      return stateStr ? JSON.parse(stateStr) : null;
    } catch {
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ KV
   */
  static async setState(kv: any, studentId: string, stateData: StudentStateData): Promise<void> {
    stateData.lastActivity = new Date().toISOString();
    await kv.put(`student_state_${studentId}`, JSON.stringify(stateData));
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  static async clearState(kv: any, studentId: string): Promise<void> {
    await kv.delete(`student_state_${studentId}`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  static createInitialState(courseId?: string): StudentStateData {
    return {
      state: StudentState.WELCOME,
      courseId,
      lastActivity: new Date().toISOString(),
      context: {
        submissionAttempts: 0
      }
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∏ –¥–µ–π—Å—Ç–≤–∏—è
   */
  static getNextState(
    currentState: StudentState, 
    action: string, 
    context?: any
  ): StudentState {
    const transitions: Record<StudentState, Record<string, StudentState>> = {
      [StudentState.UNREGISTERED]: {
        'register': StudentState.WELCOME
      },
      
      [StudentState.WELCOME]: {
        'view_courses': StudentState.DASHBOARD,
        'auto': StudentState.DASHBOARD
      },
      
      [StudentState.DASHBOARD]: {
        'select_course': StudentState.COURSE_VIEW,
        'refresh': StudentState.DASHBOARD
      },
      
      [StudentState.COURSE_VIEW]: {
        'submit_report': StudentState.AWAITING_SUBMISSION,
        'back_to_dashboard': StudentState.DASHBOARD,
        'next_lesson': StudentState.COURSE_VIEW,
        'course_completed': StudentState.COURSE_COMPLETED
      },
      
      [StudentState.AWAITING_SUBMISSION]: {
        'file_uploaded': StudentState.REPORT_PENDING,
        'cancel': StudentState.COURSE_VIEW,
        'back_to_dashboard': StudentState.DASHBOARD
      },
      
      [StudentState.REPORT_PENDING]: {
        'report_approved': StudentState.LESSON_COMPLETED,
        'report_rejected': StudentState.REPORT_REJECTED,
        'back_to_dashboard': StudentState.DASHBOARD
      },
      
      [StudentState.REPORT_REJECTED]: {
        'resubmit': StudentState.AWAITING_SUBMISSION,
        'back_to_course': StudentState.COURSE_VIEW,
        'back_to_dashboard': StudentState.DASHBOARD
      },
      
      [StudentState.LESSON_COMPLETED]: {
        'next_lesson': StudentState.COURSE_VIEW,
        'back_to_dashboard': StudentState.DASHBOARD,
        'course_completed': StudentState.COURSE_COMPLETED
      },
      
      [StudentState.COURSE_COMPLETED]: {
        'back_to_dashboard': StudentState.DASHBOARD,
        'start_new_course': StudentState.COURSE_VIEW
      },
      
      [StudentState.IDLE]: {
        'activate': StudentState.DASHBOARD
      }
    };

    return transitions[currentState]?.[action] || currentState;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
   */
  static isValidTransition(from: StudentState, to: StudentState): boolean {
    const validTransitions: Record<StudentState, StudentState[]> = {
      [StudentState.UNREGISTERED]: [StudentState.WELCOME],
      [StudentState.WELCOME]: [StudentState.DASHBOARD],
      [StudentState.DASHBOARD]: [StudentState.COURSE_VIEW, StudentState.IDLE],
      [StudentState.COURSE_VIEW]: [
        StudentState.AWAITING_SUBMISSION, 
        StudentState.DASHBOARD, 
        StudentState.COURSE_COMPLETED
      ],
      [StudentState.AWAITING_SUBMISSION]: [
        StudentState.REPORT_PENDING, 
        StudentState.COURSE_VIEW, 
        StudentState.DASHBOARD
      ],
      [StudentState.REPORT_PENDING]: [
        StudentState.LESSON_COMPLETED, 
        StudentState.REPORT_REJECTED,
        StudentState.DASHBOARD
      ],
      [StudentState.REPORT_REJECTED]: [
        StudentState.AWAITING_SUBMISSION, 
        StudentState.COURSE_VIEW, 
        StudentState.DASHBOARD
      ],
      [StudentState.LESSON_COMPLETED]: [
        StudentState.COURSE_VIEW, 
        StudentState.COURSE_COMPLETED, 
        StudentState.DASHBOARD
      ],
      [StudentState.COURSE_COMPLETED]: [StudentState.DASHBOARD, StudentState.COURSE_VIEW],
      [StudentState.IDLE]: [StudentState.DASHBOARD]
    };

    return validTransitions[from]?.includes(to) || false;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  static getContextualActions(state: StudentState): string[] {
    const actions: Record<StudentState, string[]> = {
      [StudentState.UNREGISTERED]: [],
      [StudentState.WELCOME]: ['üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å–∞–º'],
      [StudentState.DASHBOARD]: ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
      [StudentState.COURSE_VIEW]: ['üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç', 'üîô –ö –∫—É—Ä—Å–∞–º', 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ'],
      [StudentState.AWAITING_SUBMISSION]: ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'üîô –ö —É—Ä–æ–∫—É'],
      [StudentState.REPORT_PENDING]: ['‚è≥ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏', 'üîô –ö –∫—É—Ä—Å–∞–º'],
      [StudentState.REPORT_REJECTED]: ['üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å', 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'üîô –ö —É—Ä–æ–∫—É'],
      [StudentState.LESSON_COMPLETED]: ['‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫', 'üîô –ö –∫—É—Ä—Å–∞–º', 'üéâ –ü—Ä–æ–≥—Ä–µ—Å—Å'],
      [StudentState.COURSE_COMPLETED]: ['üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'üìö –ù–æ–≤—ã–π –∫—É—Ä—Å', 'üîô –ö –∫—É—Ä—Å–∞–º'],
      [StudentState.IDLE]: ['üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å']
    };

    return actions[state] || [];
  }
} 