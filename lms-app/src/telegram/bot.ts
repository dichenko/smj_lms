import { DatabaseService } from '../utils/database';

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: any;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  text?: string;
  document?: TelegramDocument;
  photo?: TelegramPhoto[];
  reply_to_message?: TelegramMessage;
}

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
  title?: string;
  username?: string;
}

interface TelegramDocument {
  file_id: string;
  file_name: string;
  mime_type?: string;
  file_size?: number;
}

interface TelegramPhoto {
  file_id: string;
  file_size?: number;
  width: number;
  height: number;
}

export class TelegramBot {
  private botToken: string;
  private db: DatabaseService;
  private adminChatId: string;
  private apiBase = 'https://api.telegram.org/bot';

  constructor(token: string, db: DatabaseService, adminChatId: string) {
    this.botToken = token;
    this.db = db;
    this.adminChatId = adminChatId;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async handleUpdate(update: TelegramUpdate): Promise<void> {
    try {
      if (update.message) {
        await this.handleMessage(update.message);
      } else if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      console.error('Error handling update:', error);
      await this.db.logError({
        source: 'telegram_bot',
        message: `Update handling error: ${error.message}`,
        meta: { update_id: update.update_id, error: error.toString() }
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  private async handleMessage(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';
    const tgid = message.from.id.toString();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/')) {
      await this.handleCommand(message);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (message.document) {
      await this.handleDocument(message);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if (message.photo && message.photo.length > 0) {
      await this.handlePhoto(message);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (text && !text.startsWith('/')) {
      await this.sendMessage(chatId, 
        'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n\n' +
        '/start - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n' +
        '/lesson - –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫\n' +
        '/progress - –ü—Ä–æ–≥—Ä–µ—Å—Å\n' +
        '/reports - –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤\n' +
        '/help - –°–ø—Ä–∞–≤–∫–∞'
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  private async handleCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';
    const tgid = message.from.id.toString();

    switch (text.split(' ')[0]) {
      case '/start':
        await this.handleStartCommand(message);
        break;
      case '/help':
        await this.handleHelpCommand(message);
        break;
      case '/lesson':
        await this.handleLessonCommand(message);
        break;
      case '/progress':
        await this.handleProgressCommand(message);
        break;
      case '/reports':
        await this.handleReportsCommand(message);
        break;
      case '/submit':
        await this.handleSubmitCommand(message);
        break;
      default:
        await this.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  private async handleStartCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      const student = await this.db.getStudentByTgid(tgid);
      
      if (!student) {
        await this.sendMessage(chatId,
          'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMJ LMS!\n\n' +
          '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n' +
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n' +
          'üìß –ö–æ–Ω—Ç–∞–∫—Ç: admin@smj-lms.com'
        );
        return;
      }

      await this.sendMessage(chatId,
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${student.name}!\n\n` +
        'üéì –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ SMJ LMS.\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/lesson - –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫\n' +
        '/progress - –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n' +
        '/reports - –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—á–µ—Ç–æ–≤\n' +
        '/help - –°–ø—Ä–∞–≤–∫–∞'
      );
    } catch (error) {
      console.error('Error in /start command:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /help
  private async handleHelpCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;

    await this.sendMessage(chatId,
      'üìö **SMJ LMS - –°–ø—Ä–∞–≤–∫–∞**\n\n' +
      '**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n' +
      '/start - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n' +
      '/lesson - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫\n' +
      '/progress - –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è\n' +
      '/reports - –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤\n' +
      '/submit - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º)\n\n' +
      '**–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç:**\n' +
      '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, DOC, DOCX)\n' +
      '2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /submit\n\n' +
      '‚ùì –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
  }

  // –ö–æ–º–∞–Ω–¥–∞ /lesson
  private async handleLessonCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      const course = await this.db.getCourseById(student.course_id);
      if (!course) {
        await this.sendMessage(chatId, '‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const lessons = await this.db.getLessonsByCourse(student.course_id);
      if (lessons.length === 0) {
        await this.sendMessage(chatId, 'üìö –í –≤–∞—à–µ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤');
        return;
      }

      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);
      
      let currentLessonIndex = 0;
      for (let i = 0; i < lessons.length; i++) {
        const lessonReport = studentReports.find(r => r.lesson_id === lessons[i].id);
        if (!lessonReport || lessonReport.status === 'rejected') {
          currentLessonIndex = i;
          break;
        }
        if (i === lessons.length - 1) {
          currentLessonIndex = i;
        }
      }

      const currentLesson = lessons[currentLessonIndex];
      const progress = `${currentLessonIndex + 1} –∏–∑ ${lessons.length}`;

      await this.sendMessage(chatId,
        `üìö **–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫**\n\n` +
        `**–ö—É—Ä—Å:** ${course.title}\n` +
        `**–£—Ä–æ–∫:** ${currentLesson.title}\n` +
        `**–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${progress}\n\n` +
        `**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:**\n${currentLesson.content}\n\n` +
        `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /submit`
      );
    } catch (error) {
      console.error('Error in /lesson command:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /progress
  private async handleProgressCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      const course = await this.db.getCourseById(student.course_id);
      const lessons = await this.db.getLessonsByCourse(student.course_id);
      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);

      let completed = 0;
      let pending = 0;
      let rejected = 0;

      for (const lesson of lessons) {
        const report = studentReports.find(r => r.lesson_id === lesson.id);
        if (report) {
          if (report.status === 'approved') completed++;
          else if (report.status === 'pending') pending++;
          else if (report.status === 'rejected') rejected++;
        }
      }

      const total = lessons.length;
      const progressPercent = Math.round((completed / total) * 100);

      await this.sendMessage(chatId,
        `üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å**\n\n` +
        `**–ö—É—Ä—Å:** ${course?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
        `**–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤:** ${total}\n` +
        `**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** ${completed} ‚úÖ\n` +
        `**–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:** ${pending} ‚è≥\n` +
        `**–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:** ${rejected} ‚ùå\n\n` +
        `**–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** ${progressPercent}%\n\n` +
        `${'‚ñà'.repeat(Math.floor(progressPercent / 10))}${'‚ñë'.repeat(10 - Math.floor(progressPercent / 10))}`
      );
    } catch (error) {
      console.error('Error in /progress command:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /reports
  private async handleReportsCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);

      if (studentReports.length === 0) {
        await this.sendMessage(chatId, 'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤');
        return;
      }

      let message = 'üìù **–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:**\n\n';
      
      for (const report of studentReports.slice(-5)) {
        const lesson = await this.db.getLessonById(report.lesson_id);
        const status = report.status === 'approved' ? '‚úÖ' : 
                      report.status === 'pending' ? '‚è≥' : '‚ùå';
        
        message += `${status} **${lesson?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫'}**\n`;
        message += `üìÖ ${new Date(report.submitted_at).toLocaleDateString('ru-RU')}\n`;
        message += `–°—Ç–∞—Ç—É—Å: ${this.getStatusText(report.status)}\n`;
        
        if (report.admin_comment) {
          message += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${report.admin_comment}\n`;
        }
        message += '\n';
      }

      await this.sendMessage(chatId, message);
    } catch (error) {
      console.error('Error in /reports command:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /submit
  private async handleSubmitCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    if (!message.reply_to_message) {
      await this.sendMessage(chatId, '‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –∫–æ–º–∞–Ω–¥–æ–π /submit');
      return;
    }

    try {
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      const replyMessage = message.reply_to_message;
      const file = replyMessage.document || replyMessage.photo?.[0];

      if (!file) {
        await this.sendMessage(chatId, '‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ');
        return;
      }

      const lessons = await this.db.getLessonsByCourse(student.course_id);
      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);
      
      let currentLessonIndex = 0;
      for (let i = 0; i < lessons.length; i++) {
        const lessonReport = studentReports.find(r => r.lesson_id === lessons[i].id);
        if (!lessonReport || lessonReport.status === 'rejected') {
          currentLessonIndex = i;
          break;
        }
      }

      const currentLesson = lessons[currentLessonIndex];
      if (!currentLesson) {
        await this.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫');
        return;
      }

      const existingReport = studentReports.find(r => r.lesson_id === currentLesson.id);
      if (existingReport && existingReport.status !== 'rejected') {
        await this.sendMessage(chatId, '‚ùå –û—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        return;
      }

      const report = await this.db.createReport({
        student_id: student.id,
        lesson_id: currentLesson.id
      });

      const adminMessage = 
        `üìù **–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç**\n\n` +
        `**–°—Ç—É–¥–µ–Ω—Ç:** ${student.name}\n` +
        `**–ì–æ—Ä–æ–¥:** ${student.city}\n` +
        `**–£—Ä–æ–∫:** ${currentLesson.title}\n` +
        `**ID –æ—Ç—á–µ—Ç–∞:** ${report.id}\n\n` +
        `–î–ª—è —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å`;

      await this.sendMessage(this.adminChatId, adminMessage);
      
      await this.sendMessage(chatId,
        `‚úÖ **–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n` +
        `**–£—Ä–æ–∫:** ${currentLesson.title}\n` +
        `**–°—Ç–∞—Ç—É—Å:** –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ‚è≥\n\n` +
        `–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω.`
      );

    } catch (error) {
      console.error('Error in /submit command:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  private async handleDocument(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;

    await this.sendMessage(chatId,
      'üìé –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!\n\n' +
      '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ –æ—Ç—á–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /submit'
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
  private async handlePhoto(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;

    await this.sendMessage(chatId,
      'üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n' +
      '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ –æ—Ç—á–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /submit'
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
  private async handleCallbackQuery(callbackQuery: any): Promise<void> {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É inline –∫–Ω–æ–ø–æ–∫
    console.log('Callback query received:', callbackQuery);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(chatId: number | string, text: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'Markdown'
        })
      });

      if (!response.ok) {
        const error = await response.json();
        console.error('Telegram API error:', error);
        return false;
      }

      return true;
    } catch (error) {
      console.error('Error sending message:', error);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É
  async sendNotificationToStudent(tgid: string, message: string): Promise<boolean> {
    return this.sendMessage(tgid, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  async sendNotificationToAdmin(message: string): Promise<boolean> {
    return this.sendMessage(this.adminChatId, message);
  }

  private getStatusText(status: string): string {
    switch (status) {
      case 'pending': return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ‚è≥';
      case 'approved': return '–û–¥–æ–±—Ä–µ–Ω ‚úÖ';
      case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }
} 