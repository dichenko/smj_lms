import { DatabaseService } from '../utils/database';

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  text?: string;
  document?: TelegramDocument;
  photo?: TelegramPhoto[];
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message: TelegramMessage;
  data: string;
}

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
  title?: string;
  username?: string;
}

interface TelegramDocument {
  file_id: string;
  file_name: string;
  mime_type?: string;
  file_size?: number;
}

interface TelegramPhoto {
  file_id: string;
  file_size?: number;
  width: number;
  height: number;
}

interface InlineKeyboard {
  inline_keyboard: InlineKeyboardButton[][];
}

interface InlineKeyboardButton {
  text: string;
  callback_data: string;
}

export class TelegramBot {
  private botToken: string;
  private db: DatabaseService;
  private adminChatId: string;
  private apiBase = 'https://api.telegram.org/bot';

  constructor(token: string, db: DatabaseService, adminChatId: string) {
    this.botToken = token;
    this.db = db;
    this.adminChatId = adminChatId;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async handleUpdate(update: TelegramUpdate): Promise<void> {
    try {
      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      } else if (update.message) {
        await this.handleMessage(update.message);
      }
    } catch (error: any) {
      console.error('Error handling update:', error);
      await this.db.logError({
        source: 'telegram_bot',
        message: `Update handling error: ${error.message}`,
        meta: { update_id: update.update_id, error: error.toString() }
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  private async handleMessage(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';
    const tgid = message.from.id.toString();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/')) {
      await this.handleCommand(message);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    if (message.document || message.photo) {
      await this.handleFileUpload(message);
      return;
    }

    // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await this.sendMessage(chatId, 
      'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º'
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  private async handleCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';
    const tgid = message.from.id.toString();

    if (text === '/start') {
      await this.handleStartCommand(message);
    } else {
      await this.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
  private async handleStartCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –≤ –±–∞–∑–µ
      const student = await this.db.getStudentByTgid(tgid);
      
      if (!student) {
        await this.sendMessage(chatId,
          'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMJ LMS!\n\n' +
          '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n' +
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n' +
          'üìß –ö–æ–Ω—Ç–∞–∫—Ç: admin@smj-lms.com'
        );
        return;
      }

      await this.showStudentDashboard(chatId, student.id);

    } catch (error: any) {
      console.error('Error in /start command:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
  private async showStudentDashboard(chatId: number, studentId: string): Promise<void> {
    try {
      const student = await this.db.getStudentById(studentId);
      if (!student) return;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É student_courses
      const studentCourses = await this.db.getStudentCourses(studentId);

      if (studentCourses.length === 0) {
        await this.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤');
        return;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ ID
      studentCourses.sort((a, b) => parseInt(a.course.id) - parseInt(b.course.id));

      let message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${student.name}!\n\n`;
      message += 'üìö **–í–∞—à–∏ –∫—É—Ä—Å—ã:**\n\n';

      const buttons: InlineKeyboardButton[][] = [];

      for (const studentCourse of studentCourses) {
        const course = studentCourse.course;
        const lessons = await this.db.getLessonsByCourse(course.id);
        const reports = await this.db.getAllReports();
        const studentReports = reports.filter(r => r.student_id === student.id);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        const courseReports = studentReports.filter(r => {
          const lesson = lessons.find(l => l.id === r.lesson_id);
          return lesson && lesson.course_id === course.id;
        });
        
        const completedLessons = courseReports.filter(r => r.status === 'approved').length;
        const totalLessons = lessons.length;
        const progress = totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0;

        message += `‚Ä¢ **${course.title}**\n`;
        message += `  –ü—Ä–æ–≥—Ä–µ—Å—Å: ${completedLessons}/${totalLessons} (${progress}%)\n\n`;

        // –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        buttons.push([{
          text: `üìñ ${course.title} (${progress}%)`,
          callback_data: `course_${course.id}`
        }]);
      }

      const keyboard: InlineKeyboard = {
        inline_keyboard: buttons
      };

      await this.sendMessageWithKeyboard(chatId, message, keyboard);

    } catch (error: any) {
      console.error('Error showing dashboard:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –∫—É—Ä—Å–∞
  private async showCurrentLesson(chatId: number, studentId: string, courseId: string): Promise<void> {
    try {
      const student = await this.db.getStudentById(studentId);
      const course = await this.db.getCourseById(courseId);
      const lessons = await this.db.getLessonsByCourse(courseId);
      
      if (!student || !course || lessons.length === 0) {
        await this.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å
      const studentCourses = await this.db.getStudentCourses(studentId);
      const isEnrolled = studentCourses.some(sc => sc.course_id === courseId && sc.is_active);
      
      if (!isEnrolled) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å');
        return;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
      lessons.sort((a, b) => a.order_num - b.order_num);

      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫
      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);
      
      let currentLesson = lessons[0];
      
      for (const lesson of lessons) {
        const report = studentReports.find(r => r.lesson_id === lesson.id);
        if (!report || report.status !== 'approved') {
          currentLesson = lesson;
          break;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
      const currentReport = studentReports.find(r => r.lesson_id === currentLesson.id);
      
      let message = `üìñ **${course.title}**\n\n`;
      message += `**–£—Ä–æ–∫ ${currentLesson.order_num}: ${currentLesson.title}**\n\n`;
      message += `${currentLesson.content}\n\n`;

      if (currentReport) {
        if (currentReport.status === 'pending') {
          message += '‚è≥ **–°—Ç–∞—Ç—É—Å:** –í–∞—à –æ—Ç—á–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\n\n';
        } else if (currentReport.status === 'rejected') {
          message += '‚ùå **–°—Ç–∞—Ç—É—Å:** –û—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω\n';
          if (currentReport.admin_comment) {
            message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${currentReport.admin_comment}\n\n`;
          }
        }
      }

      const keyboard: InlineKeyboard = {
        inline_keyboard: [
          [
            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', callback_data: 'back_to_courses' },
            { text: 'üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data: `submit_${currentLesson.id}` }
          ]
        ]
      };

      await this.sendMessageWithKeyboard(chatId, message, keyboard);

    } catch (error: any) {
      console.error('Error showing lesson:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
  private async handleCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    const tgid = callbackQuery.from.id.toString();
    const data = callbackQuery.data;

    try {
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.answerCallbackQuery(callbackQuery.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      if (data.startsWith('course_')) {
        const courseId = data.replace('course_', '');
        await this.showCurrentLesson(chatId, student.id, courseId);
      } else if (data === 'back_to_courses') {
        await this.showStudentDashboard(chatId, student.id);
      } else if (data.startsWith('submit_')) {
        const lessonId = data.replace('submit_', '');
        await this.handleSubmitRequest(chatId, student.id, lessonId);
      } else if (data.startsWith('admin_approve_')) {
        await this.handleAdminApprove(callbackQuery);
      } else if (data.startsWith('admin_reject_')) {
        await this.handleAdminReject(callbackQuery);
      }

      await this.answerCallbackQuery(callbackQuery.id);

    } catch (error: any) {
      console.error('Error handling callback:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞
  private async handleSubmitRequest(chatId: number, studentId: string, lessonId: string): Promise<void> {
    await this.sendMessage(chatId,
      'üìù **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞**\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) —Å –≤–∞—à–∏–º –æ—Ç—á–µ—Ç–æ–º.\n\n' +
      '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
      '‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, DOCX)\n' +
      '‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG)\n\n' +
      '‚ùó –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –æ—Ç—á–µ—Ç–æ–º
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  private async handleFileUpload(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
      const studentCourses = await this.db.getStudentCourses(student.id);
      
      if (studentCourses.length === 0) {
        await this.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ —É—Ä–æ–∫–∞–º–∏
      let currentLesson = null;
      let currentCourse = null;
      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);

      // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∏—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫
      for (const studentCourse of studentCourses) {
        if (!studentCourse.is_active) continue;

        const lessons = await this.db.getLessonsByCourse(studentCourse.course_id);
        lessons.sort((a, b) => a.order_num - b.order_num);

        for (const lesson of lessons) {
          const report = studentReports.find(r => r.lesson_id === lesson.id);
          if (!report || report.status !== 'approved') {
            currentLesson = lesson;
            currentCourse = studentCourse.course;
            break;
          }
        }

        if (currentLesson) break;
      }

      if (!currentLesson || !currentCourse) {
        await this.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
      const existingReport = studentReports.find(r => r.lesson_id === currentLesson.id);
      
      let report;
      if (existingReport && existingReport.status === 'rejected') {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        report = await this.db.updateReport(existingReport.id, { status: 'pending' });
      } else if (!existingReport) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = await this.db.createReport({
          student_id: student.id,
          lesson_id: currentLesson.id
        });
      } else {
        await this.sendMessage(chatId, '‚ùå –û—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        return;
      }

      if (!report) {
        await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
      const adminMessage = 
        `üìù **–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç**\n\n` +
        `**–°—Ç—É–¥–µ–Ω—Ç:** ${student.name}\n` +
        `**–ì–æ—Ä–æ–¥:** ${student.city}\n` +
        `**–ö—É—Ä—Å:** ${currentCourse.title}\n` +
        `**–£—Ä–æ–∫ ${currentLesson.order_num}:** ${currentLesson.title}\n\n` +
        `**–ó–∞–¥–∞–Ω–∏–µ:**\n${currentLesson.content}\n\n` +
        `**ID –æ—Ç—á–µ—Ç–∞:** ${report.id}`;

      const adminKeyboard: InlineKeyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `admin_approve_${report.id}` },
            { text: '‚ùå –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É', callback_data: `admin_reject_${report.id}` }
          ]
        ]
      };

      await this.sendMessageWithKeyboard(this.adminChatId, adminMessage, adminKeyboard);
      
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await this.forwardMessage(this.adminChatId, chatId, message.message_id);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
      await this.sendMessage(chatId,
        `‚úÖ **–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!**\n\n` +
        `**–£—Ä–æ–∫:** ${currentLesson.title}\n` +
        `**–°—Ç–∞—Ç—É—Å:** –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ‚è≥\n\n` +
        `–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω.`
      );

    } catch (error: any) {
      console.error('Error handling file upload:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞');
    }
  }

  // –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –æ—Ç—á–µ—Ç
  private async handleAdminApprove(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const reportId = callbackQuery.data.replace('admin_approve_', '');
    
    try {
      const report = await this.db.getReportById(reportId);
      if (!report) {
        await this.answerCallbackQuery(callbackQuery.id, '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
      await this.db.reviewReport(reportId, {
        status: 'approved',
        admin_comment: undefined,
        reviewed_by: 'admin'
      });

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
      const student = await this.db.getStudentById(report.student_id);
      const lesson = await this.db.getLessonById(report.lesson_id);
      
      if (student && lesson) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        await this.sendMessage(student.tgid,
          `üéâ **–û—Ç—á–µ—Ç –æ–¥–æ–±—Ä–µ–Ω!**\n\n` +
          `**–£—Ä–æ–∫:** ${lesson.title}\n` +
          `**–°—Ç–∞—Ç—É—Å:** –ü—Ä–∏–Ω—è—Ç ‚úÖ\n\n` +
          `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.`
        );
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      await this.editMessageText(
        callbackQuery.message.chat.id,
        callbackQuery.message.message_id,
        callbackQuery.message.text + '\n\n‚úÖ **–û–î–û–ë–†–ï–ù–û**'
      );

      await this.answerCallbackQuery(callbackQuery.id, '–û—Ç—á–µ—Ç –æ–¥–æ–±—Ä–µ–Ω!');

    } catch (error: any) {
      console.error('Error approving report:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏');
    }
  }

  // –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç—á–µ—Ç
  private async handleAdminReject(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const reportId = callbackQuery.data.replace('admin_reject_', '');
    
    try {
      const report = await this.db.getReportById(reportId);
      if (!report) {
        await this.answerCallbackQuery(callbackQuery.id, '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      await this.sendMessage(callbackQuery.message.chat.id,
        `üìù **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n` +
        `–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):\n\n` +
        `ID –æ—Ç—á–µ—Ç–∞: ${reportId}`
      );

      await this.answerCallbackQuery(callbackQuery.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞');

    } catch (error: any) {
      console.error('Error rejecting report:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API

  async sendMessage(chatId: number | string, text: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'Markdown'
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error sending message:', error);
      return false;
    }
  }

  async sendMessageWithKeyboard(chatId: number | string, text: string, keyboard: InlineKeyboard): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error sending message with keyboard:', error);
      return false;
    }
  }

  async answerCallbackQuery(callbackQueryId: string, text?: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text: text || ''
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error answering callback query:', error);
      return false;
    }
  }

  async forwardMessage(chatId: number | string, fromChatId: number | string, messageId: number): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/forwardMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          from_chat_id: fromChatId,
          message_id: messageId
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error forwarding message:', error);
      return false;
    }
  }

  async editMessageText(chatId: number | string, messageId: number, text: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/editMessageText`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text: text,
          parse_mode: 'Markdown'
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error editing message:', error);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É
  async sendNotificationToStudent(tgid: string, message: string): Promise<boolean> {
    return this.sendMessage(tgid, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  async sendNotificationToAdmin(message: string): Promise<boolean> {
    return this.sendMessage(this.adminChatId, message);
  }
} 