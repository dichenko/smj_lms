import { DatabaseService } from '../utils/database';
import { StudentState, StudentStateData, StudentStateMachine } from './states';

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  text?: string;
  document?: TelegramDocument;
  photo?: TelegramPhoto[];
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message: TelegramMessage;
  data: string;
}

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
  title?: string;
  username?: string;
}

interface TelegramDocument {
  file_id: string;
  file_name: string;
  mime_type?: string;
  file_size?: number;
}

interface TelegramPhoto {
  file_id: string;
  file_size?: number;
  width: number;
  height: number;
}

interface InlineKeyboard {
  inline_keyboard: InlineKeyboardButton[][];
}

interface InlineKeyboardButton {
  text: string;
  callback_data: string;
}

interface KVNamespace {
  get(key: string): Promise<string | null>;
  put(key: string, value: string): Promise<void>;
  delete(key: string): Promise<void>;
}

interface AdminState {
  action: string;
  reportId: string;
}

export class TelegramBot {
  private botToken: string;
  private db: DatabaseService;
  private adminChatId: string;
  private kv: KVNamespace;
  private apiBase = 'https://api.telegram.org/bot';

  constructor(token: string, db: DatabaseService, adminChatId: string, kv: KVNamespace) {
    this.botToken = token;
    this.db = db;
    this.adminChatId = adminChatId;
    this.kv = kv;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∞
  private async getAdminState(chatId: string): Promise<AdminState | null> {
    try {
      const stateStr = await this.kv.get(`admin_state_${chatId}`);
      return stateStr ? JSON.parse(stateStr) : null;
    } catch {
      return null;
    }
  }

  private async setAdminState(chatId: string, state: AdminState): Promise<void> {
    await this.kv.put(`admin_state_${chatId}`, JSON.stringify(state));
  }

  private async clearAdminState(chatId: string): Promise<void> {
    await this.kv.delete(`admin_state_${chatId}`);
  }

  // === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò –°–¢–£–î–ï–ù–¢–û–í ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  private async getStudentState(studentId: string): Promise<StudentStateData | null> {
    return await StudentStateMachine.getState(this.kv, studentId);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  private async updateStudentState(studentId: string, stateData: StudentStateData): Promise<void> {
    await StudentStateMachine.setState(this.kv, studentId, stateData);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  private async initializeStudentState(studentId: string, courseId?: string, showWelcome: boolean = true): Promise<StudentStateData> {
    const initialState = StudentStateMachine.createInitialState(courseId, showWelcome);
    await this.updateStudentState(studentId, initialState);
    return initialState;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å Telegram –¥–∞–Ω–Ω—ã–º–∏
   */
  private async initializeStudentStateWithTelegram(studentId: string, courseId?: string, showWelcome: boolean = true, telegramName?: string): Promise<StudentStateData> {
    const initialState = StudentStateMachine.createInitialState(courseId, showWelcome);
    if (telegramName) {
      initialState.context = {
        ...initialState.context,
        telegramName
      };
    }
    await this.updateStudentState(studentId, initialState);
    return initialState;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  private async transitionStudentState(
    studentId: string, 
    action: string, 
    newData?: Partial<StudentStateData>
  ): Promise<StudentStateData | null> {
    const currentState = await this.getStudentState(studentId);
    if (!currentState) return null;

    const nextState = StudentStateMachine.getNextState(currentState.state, action);
    
    if (StudentStateMachine.isValidTransition(currentState.state, nextState)) {
      const updatedState: StudentStateData = {
        ...currentState,
        ...newData,
        state: nextState,
        context: {
          ...currentState.context,
          ...newData?.context,
          previousState: currentState.state
        }
      };
      
      await this.updateStudentState(studentId, updatedState);
      return updatedState;
    }

    return currentState;
  }

  /**
   * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
   */
  private async handleStudentStateBasedResponse(
    chatId: number, 
    studentId: string, 
    studentState: StudentStateData
  ): Promise<void> {
    switch (studentState.state) {
      case StudentState.WELCOME:
        await this.showWelcomeScreen(chatId, studentId);
        break;
        
      case StudentState.DASHBOARD:
        await this.showStatefulDashboard(chatId, studentId);
        break;
        
      case StudentState.COURSE_VIEW:
        if (studentState.courseId) {
          await this.showStatefulCourseView(chatId, studentId, studentState.courseId);
        } else {
          // Fallback to dashboard if no course selected
          await this.transitionStudentState(studentId, 'back_to_dashboard');
          await this.showStatefulDashboard(chatId, studentId);
        }
        break;
        
      case StudentState.AWAITING_SUBMISSION:
        await this.showSubmissionPrompt(chatId, studentId, studentState);
        break;
        
      case StudentState.REPORT_PENDING:
        await this.showReportPendingStatus(chatId, studentId, studentState);
        break;
        
      case StudentState.REPORT_REJECTED:
        await this.showReportRejectedStatus(chatId, studentId, studentState);
        break;
        
      case StudentState.LESSON_COMPLETED:
        await this.showLessonCompletedStatus(chatId, studentId, studentState);
        break;
        
      case StudentState.COURSE_COMPLETED:
        await this.showCourseCompletedStatus(chatId, studentId);
        break;
        
      default:
        // Fallback to dashboard for unknown states
        await this.transitionStudentState(studentId, 'activate');
        await this.showStatefulDashboard(chatId, studentId);
        break;
    }
  }

  // === –ú–ï–¢–û–î–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
   */
  private async showWelcomeScreen(chatId: number, studentId: string): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram –∏–º–µ–Ω–∏
    const currentState = await this.getStudentState(studentId);
    const telegramName = currentState?.context?.telegramName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ
    await this.transitionStudentState(studentId, 'show_welcome', {
      context: { hasSeenWelcome: true }
    });

    const message = `üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${telegramName}!**\n\n` +
                   `üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMJ LMS!\n` +
                   `üìö –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?`;

    const keyboard: InlineKeyboard = {
      inline_keyboard: [[
        { text: 'üìö –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å–∞–º', callback_data: 'welcome_to_dashboard' }
      ]]
    };

    await this.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (—Å –æ—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏)
   */
  private async showStatefulDashboard(chatId: number, studentId: string): Promise<void> {
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await this.clearChatHistory(chatId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    await this.transitionStudentState(studentId, 'refresh');
    await this.showStudentDashboard(chatId, studentId);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
   */
  private async showStatefulCourseView(chatId: number, studentId: string, courseId: string): Promise<void> {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∫—É—Ä—Å–æ–º
    await this.transitionStudentState(studentId, 'select_course', { courseId });
    await this.showCurrentLesson(chatId, studentId, courseId);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
   */
  private async showSubmissionPrompt(chatId: number, studentId: string, state: StudentStateData): Promise<void> {
    await this.sendMessage(chatId,
      'üìù **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞**\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) —Å –≤–∞—à–∏–º –æ—Ç—á–µ—Ç–æ–º.\n\n' +
      '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
      '‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, DOCX)\n‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG)\n\n' +
      '‚ùó –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
    );
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  private async showReportPendingStatus(chatId: number, studentId: string, state: StudentStateData): Promise<void> {
    const message = '‚è≥ **–û—Ç—á–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ**\n\n' +
                   '–í–∞—à –æ—Ç—á–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n' +
                   '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.';

    const keyboard: InlineKeyboard = {
      inline_keyboard: [[
        { text: 'üîô –ö –∫—É—Ä—Å–∞–º', callback_data: 'to_dashboard' }
      ]]
    };

    await this.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  private async showReportRejectedStatus(chatId: number, studentId: string, state: StudentStateData): Promise<void> {
    let message = '‚ùå **–û—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω**\n\n';
    
    if (state.reportId) {
      const report = await this.db.getReportById(state.reportId);
      if (report?.admin_comment) {
        message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${report.admin_comment}\n\n`;
      }
    }
    
    message += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.';

    const keyboard: InlineKeyboard = {
      inline_keyboard: [[
        { text: 'üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å', callback_data: 'resubmit_report' },
        { text: 'üîô –ö —É—Ä–æ–∫—É', callback_data: `course_${state.courseId}` }
      ]]
    };

    await this.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
   */
  private async showLessonCompletedStatus(chatId: number, studentId: string, state: StudentStateData): Promise<void> {
    const message = 'üéâ **–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n' +
                   '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –æ—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n' +
                   '–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.';

    const keyboard: InlineKeyboard = {
      inline_keyboard: [[
        { text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫', callback_data: `course_${state.courseId}` },
        { text: 'üîô –ö –∫—É—Ä—Å–∞–º', callback_data: 'to_dashboard' }
      ]]
    };

    await this.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
   */
  private async showCourseCompletedStatus(chatId: number, studentId: string): Promise<void> {
    const message = 'üèÜ **–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n' +
                   '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å –∫—É—Ä—Å.\n' +
                   '–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –∏–∑—É—á–µ–Ω–∏—é –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–æ–≤.';

    const keyboard: InlineKeyboard = {
      inline_keyboard: [[
        { text: 'üìö –í—Å–µ –∫—É—Ä—Å—ã', callback_data: 'to_dashboard' },
        { text: 'üéØ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'show_progress' }
      ]]
    };

    await this.sendMessageWithKeyboard(chatId, message, keyboard);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  private async handleStudentCallback(
    callbackQuery: TelegramCallbackQuery, 
    studentId: string, 
    data: string
  ): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    let studentState = await this.getStudentState(studentId);

    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if (!studentState) {
      studentState = await this.initializeStudentState(studentId);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback'–∏
    if (data === 'welcome_to_dashboard') {
      await this.transitionStudentState(studentId, 'view_courses');
      await this.showStatefulDashboard(chatId, studentId);
      
    } else if (data === 'to_dashboard' || data === 'back_to_courses') {
      await this.transitionStudentState(studentId, 'back_to_dashboard');
      await this.showStatefulDashboard(chatId, studentId);
      
    } else if (data.startsWith('course_')) {
      const courseId = data.replace('course_', '');
      await this.transitionStudentState(studentId, 'select_course', { courseId });
      await this.showStatefulCourseView(chatId, studentId, courseId);
      
    } else if (data.startsWith('submit_')) {
      const lessonId = data.replace('submit_', '');
      await this.transitionStudentState(studentId, 'submit_report', { lessonId });
      const newState = await this.getStudentState(studentId);
      if (newState) {
        await this.showSubmissionPrompt(chatId, studentId, newState);
      }
      
    } else if (data === 'resubmit_report') {
      await this.transitionStudentState(studentId, 'resubmit');
      const newState = await this.getStudentState(studentId);
      if (newState) {
        await this.showSubmissionPrompt(chatId, studentId, newState);
      }
      
    } else if (data === 'cancel_submission') {
      await this.transitionStudentState(studentId, 'cancel');
      const newState = await this.getStudentState(studentId);
      if (newState && newState.courseId) {
        await this.showStatefulCourseView(chatId, studentId, newState.courseId);
      } else {
        await this.showStatefulDashboard(chatId, studentId);
      }
      
    } else {
      // Fallback: –µ—Å–ª–∏ callback –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await this.handleStudentStateBasedResponse(chatId, studentId, studentState);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async handleUpdate(update: TelegramUpdate): Promise<void> {
    try {
      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      } else if (update.message) {
        await this.handleMessage(update.message);
      }
    } catch (error: any) {
      console.error('Error handling update:', error);
      await this.db.logError({
        source: 'telegram_bot',
        message: `Update handling error: ${error.message}`,
        meta: { update_id: update.update_id, error: error.toString() }
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  private async handleMessage(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';
    const tgid = message.from.id.toString();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/')) {
      await this.handleCommand(message);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (chatId.toString() === this.adminChatId) {
      const adminState = await this.getAdminState(chatId.toString());
      if (adminState && adminState.action === 'rejecting_report') {
        await this.handleReportRejectionComment(adminState.reportId, text, chatId);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    if (message.document || message.photo) {
      await this.handleFileUpload(message);
      return;
    }

    // –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    const student = await this.db.getStudentByTgid(tgid);
    if (student) {
      const studentState = await this.getStudentState(student.id);
      if (studentState) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await this.handleStudentStateBasedResponse(chatId, student.id, studentState);
        return;
      }
    }

    // Fallback –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await this.sendMessage(chatId, 
      'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º'
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  private async handleCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';
    const tgid = message.from.id.toString();

    if (text === '/start') {
      await this.handleStartCommand(message);
    } else {
      await this.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
  private async handleStartCommand(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –≤ –±–∞–∑–µ
      const student = await this.db.getStudentByTgid(tgid);
      
      if (!student) {
        await this.sendMessage(chatId,
          'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMJ LMS!\n\n' +
          '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n' +
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n' +
          'üìß –ö–æ–Ω—Ç–∞–∫—Ç: admin@smj-lms.com'
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
      let studentState = await this.getStudentState(student.id);
      
      if (!studentState) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑)
        const telegramName = message.from.first_name || message.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        studentState = await this.initializeStudentStateWithTelegram(student.id, undefined, true, telegramName);
      } else if (studentState.context?.hasSeenWelcome && studentState.state === StudentState.WELCOME) {
        // –ï—Å–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –¥–∞—à–±–æ—Ä–¥—É
        const newState = await this.transitionStudentState(student.id, 'auto');
        if (newState) studentState = newState;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await this.handleStudentStateBasedResponse(chatId, student.id, studentState);

    } catch (error: any) {
      console.error('Error in /start command:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
  private async showStudentDashboard(chatId: number, studentId: string): Promise<void> {
    try {
      const student = await this.db.getStudentById(studentId);
      if (!student) return;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É student_courses
      const studentCourses = await this.db.getStudentCourses(studentId);

      if (studentCourses.length === 0) {
        await this.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤');
        return;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ ID
      studentCourses.sort((a, b) => parseInt(a.course.id) - parseInt(b.course.id));

      let message = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${student.name}!\n\n`;
      message += 'üìö **–í–∞—à–∏ –∫—É—Ä—Å—ã:**\n\n';

      const buttons: InlineKeyboardButton[][] = [];

      for (const studentCourse of studentCourses) {
        const course = studentCourse.course;
        const lessons = await this.db.getLessonsByCourse(course.id);
        const reports = await this.db.getAllReports();
        const studentReports = reports.filter(r => r.student_id === student.id);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        const courseReports = studentReports.filter(r => {
          const lesson = lessons.find(l => l.id === r.lesson_id);
          return lesson && lesson.course_id === course.id;
        });
        
        const completedLessons = courseReports.filter(r => r.status === 'approved').length;
        const totalLessons = lessons.length;
        const progress = totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0;

        message += `‚Ä¢ **${course.title}**\n`;
        message += `  –ü—Ä–æ–≥—Ä–µ—Å—Å: ${completedLessons}/${totalLessons} (${progress}%)\n\n`;

        // –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        buttons.push([{
          text: `üìñ ${course.title} (${progress}%)`,
          callback_data: `course_${course.id}`
        }]);
      }

      const keyboard: InlineKeyboard = {
        inline_keyboard: buttons
      };

      await this.sendMessageWithKeyboard(chatId, message, keyboard);

    } catch (error: any) {
      console.error('Error showing dashboard:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –∫—É—Ä—Å–∞
  private async showCurrentLesson(chatId: number, studentId: string, courseId: string): Promise<void> {
    try {
      const student = await this.db.getStudentById(studentId);
      const course = await this.db.getCourseById(courseId);
      const lessons = await this.db.getLessonsByCourse(courseId);
      
      if (!student || !course || lessons.length === 0) {
        await this.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å
      const studentCourses = await this.db.getStudentCourses(studentId);
      const isEnrolled = studentCourses.some(sc => sc.course_id === courseId && sc.is_active);
      
      if (!isEnrolled) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫—É—Ä—Å');
        return;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
      lessons.sort((a, b) => a.order_num - b.order_num);

      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫
      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);
      
      let currentLesson = lessons[0];
      
      for (const lesson of lessons) {
        const report = studentReports.find(r => r.lesson_id === lesson.id);
        if (!report || report.status !== 'approved') {
          currentLesson = lesson;
          break;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
      const currentReport = studentReports.find(r => r.lesson_id === currentLesson.id);
      
      let message = `üìñ **${course.title}**\n\n`;
      message += `**–£—Ä–æ–∫ ${currentLesson.order_num}: ${currentLesson.title}**\n\n`;
      message += `${currentLesson.content}\n\n`;

      if (currentReport) {
        if (currentReport.status === 'pending') {
          message += '‚è≥ **–°—Ç–∞—Ç—É—Å:** –í–∞—à –æ—Ç—á–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\n\n';
        } else if (currentReport.status === 'rejected') {
          message += '‚ùå **–°—Ç–∞—Ç—É—Å:** –û—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω\n';
          if (currentReport.admin_comment) {
            message += `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${currentReport.admin_comment}\n\n`;
          }
        }
      }

      const keyboard: InlineKeyboard = {
        inline_keyboard: [
          [
            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', callback_data: 'back_to_courses' },
            { text: 'üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç', callback_data: `submit_${currentLesson.id}` }
          ]
        ]
      };

      await this.sendMessageWithKeyboard(chatId, message, keyboard);

    } catch (error: any) {
      console.error('Error showing lesson:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
  private async handleCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const chatId = callbackQuery.message.chat.id;
    const tgid = callbackQuery.from.id.toString();
    const data = callbackQuery.data;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º admin –¥–µ–π—Å—Ç–≤–∏—è
      if (data.startsWith('admin_approve_')) {
        await this.handleAdminApprove(callbackQuery);
        return;
      } else if (data.startsWith('admin_reject_')) {
        await this.handleAdminReject(callbackQuery);
        return;
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.answerCallbackQuery(callbackQuery.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback'–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
      await this.handleStudentCallback(callbackQuery, student.id, data);

      await this.answerCallbackQuery(callbackQuery.id);

    } catch (error: any) {
      console.error('Error handling callback:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞
  private async handleSubmitRequest(chatId: number, studentId: string, lessonId: string): Promise<void> {
    await this.sendMessage(chatId,
      'üìù **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞**\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) —Å –≤–∞—à–∏–º –æ—Ç—á–µ—Ç–æ–º.\n\n' +
      '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n' +
      '‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, DOCX)\n' +
      '‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG)\n\n' +
      '‚ùó –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ - —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –æ—Ç—á–µ—Ç–æ–º
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
  private async handleFileUpload(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const tgid = message.from.id.toString();

    try {
      const student = await this.db.getStudentByTgid(tgid);
      if (!student) {
        await this.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
      const studentState = await this.getStudentState(student.id);
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      if (!studentState || studentState.state !== StudentState.AWAITING_SUBMISSION) {
        await this.sendMessage(chatId, 
          '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ "üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç"'
        );
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞, –∞ –Ω–µ –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
      const targetCourseId = studentState.courseId;
      if (!targetCourseId) {
        await this.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫—É—Ä—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const course = await this.db.getCourseById(targetCourseId);
      const studentCourses = await this.db.getStudentCourses(student.id);
      const studentCourse = studentCourses.find(sc => sc.course_id === targetCourseId && sc.is_active);

      if (!course || !studentCourse) {
        await this.sendMessage(chatId, '‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫ –≤ –≠–¢–û–ú –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫—É—Ä—Å–µ
      const lessons = await this.db.getLessonsByCourse(targetCourseId);
      lessons.sort((a, b) => a.order_num - b.order_num);

      const reports = await this.db.getAllReports();
      const studentReports = reports.filter(r => r.student_id === student.id);

      let currentLesson = null;
      for (const lesson of lessons) {
        const report = studentReports.find(r => r.lesson_id === lesson.id);
        if (!report || report.status !== 'approved') {
          currentLesson = lesson;
          break;
        }
      }

      if (!currentLesson) {
        await this.sendMessage(chatId, '‚ùå –í—Å–µ —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
        return;
      }

      const currentCourse = course;

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
      const existingReport = studentReports.find(r => r.lesson_id === currentLesson.id);
      
      let report;
      if (existingReport && existingReport.status === 'rejected') {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        report = await this.db.updateReport(existingReport.id, { status: 'pending' });
      } else if (!existingReport) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = await this.db.createReport({
          student_id: student.id,
          lesson_id: currentLesson.id
        });
      } else {
        await this.sendMessage(chatId, '‚ùå –û—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        return;
      }

      if (!report) {
        await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
      const adminMessage = 
        `üìù **–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç**\n\n` +
        `**–°—Ç—É–¥–µ–Ω—Ç:** ${student.name}\n` +
        `**–ì–æ—Ä–æ–¥:** ${student.city}\n` +
        `**–ö—É—Ä—Å:** ${currentCourse.title}\n` +
        `**–£—Ä–æ–∫ ${currentLesson.order_num}:** ${currentLesson.title}\n\n` +
        `**–ó–∞–¥–∞–Ω–∏–µ:**\n${currentLesson.content}\n\n` +
        `**ID –æ—Ç—á–µ—Ç–∞:** ${report.id}`;

      const adminKeyboard: InlineKeyboard = {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `admin_approve_${report.id}` },
            { text: '‚ùå –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É', callback_data: `admin_reject_${report.id}` }
          ]
        ]
      };

      await this.sendMessageWithKeyboard(this.adminChatId, adminMessage, adminKeyboard);
      
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await this.forwardMessage(this.adminChatId, chatId, message.message_id);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
      await this.transitionStudentState(student.id, 'file_uploaded', {
        reportId: report.id,
        lessonId: currentLesson.id,
        courseId: currentCourse.id
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await this.sendMessage(chatId,
        `‚úÖ **–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!**\n\n` +
        `**–£—Ä–æ–∫:** ${currentLesson.title}\n` +
        `**–°—Ç–∞—Ç—É—Å:** –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ‚è≥\n\n` +
        `–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω.`
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const newState = await this.getStudentState(student.id);
      if (newState) {
        await this.showReportPendingStatus(chatId, student.id, newState);
      }

    } catch (error: any) {
      console.error('Error handling file upload:', error);
      await this.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞');
    }
  }

  // –ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –æ—Ç—á–µ—Ç
  private async handleAdminApprove(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const reportId = callbackQuery.data.replace('admin_approve_', '');
    
    try {
      const report = await this.db.getReportById(reportId);
      if (!report) {
        await this.answerCallbackQuery(callbackQuery.id, '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
      await this.db.reviewReport(reportId, {
        status: 'approved',
        admin_comment: undefined,
        reviewed_by: null
      });

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
      const student = await this.db.getStudentById(report.student_id);
      const lesson = await this.db.getLessonById(report.lesson_id);
      
      if (student && lesson) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ - —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
        await this.transitionStudentState(student.id, 'report_approved', {
          lessonId: lesson.id
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        await this.sendMessage(student.tgid,
          `üéâ **–û—Ç—á–µ—Ç –æ–¥–æ–±—Ä–µ–Ω!**\n\n` +
          `**–£—Ä–æ–∫:** ${lesson.title}\n` +
          `**–°—Ç–∞—Ç—É—Å:** –ü—Ä–∏–Ω—è—Ç ‚úÖ\n\n` +
          `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.`
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
        const studentState = await this.getStudentState(student.id);
        if (studentState) {
          await this.showLessonCompletedStatus(parseInt(student.tgid), student.id, studentState);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      await this.editMessageText(
        callbackQuery.message.chat.id,
        callbackQuery.message.message_id,
        callbackQuery.message.text + '\n\n‚úÖ **–û–î–û–ë–†–ï–ù–û**'
      );

      await this.answerCallbackQuery(callbackQuery.id, '–û—Ç—á–µ—Ç –æ–¥–æ–±—Ä–µ–Ω!');

    } catch (error: any) {
      console.error('Error approving report:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏');
    }
  }

  // –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç—á–µ—Ç
  private async handleAdminReject(callbackQuery: TelegramCallbackQuery): Promise<void> {
    const reportId = callbackQuery.data.replace('admin_reject_', '');
    
    try {
      const report = await this.db.getReportById(reportId);
      if (!report) {
        await this.answerCallbackQuery(callbackQuery.id, '–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      await this.setAdminState(callbackQuery.message.chat.id.toString(), {
        action: 'rejecting_report',
        reportId: reportId
      });

      // –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      await this.sendMessage(callbackQuery.message.chat.id,
        `üìù **–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞**\n\n` +
        `–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):\n\n` +
        `ID –æ—Ç—á–µ—Ç–∞: ${reportId}`
      );

      await this.answerCallbackQuery(callbackQuery.id, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞');

    } catch (error: any) {
      console.error('Error rejecting report:', error);
      await this.answerCallbackQuery(callbackQuery.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –æ—Ç—á–µ—Ç–∞
  private async handleReportRejectionComment(reportId: string, comment: string, adminChatId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
      const report = await this.db.getReportById(reportId);
      if (!report) {
        await this.sendMessage(adminChatId, '‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Ç—á–µ—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
      await this.db.reviewReport(reportId, {
        status: 'rejected',
        admin_comment: comment.trim() || '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞',
        reviewed_by: null
      });

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
      const student = await this.db.getStudentById(report.student_id);
      const lesson = await this.db.getLessonById(report.lesson_id);
      
      if (student && lesson) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ - –æ—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω
        await this.transitionStudentState(student.id, 'report_rejected', {
          reportId: reportId,
          lessonId: lesson.id
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        await this.sendMessage(student.tgid,
          `‚ùå **–û—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω**\n\n` +
          `**–£—Ä–æ–∫:** ${lesson.title}\n` +
          `**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${comment.trim() || '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞'}\n\n` +
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.`
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        const studentState = await this.getStudentState(student.id);
        if (studentState) {
          await this.showReportRejectedStatus(parseInt(student.tgid), student.id, studentState);
        }
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      await this.sendMessage(adminChatId,
        `‚úÖ **–û—Ç—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω**\n\n` +
        `–°—Ç—É–¥–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.`
      );

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      await this.clearAdminState(adminChatId.toString());

    } catch (error: any) {
      console.error('Error processing report rejection:', error);
      await this.sendMessage(adminChatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
      await this.clearAdminState(adminChatId.toString());
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API

  async sendMessage(chatId: number | string, text: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'Markdown'
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error sending message:', error);
      return false;
    }
  }

  async sendMessageWithKeyboard(chatId: number | string, text: string, keyboard: InlineKeyboard): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error sending message with keyboard:', error);
      return false;
    }
  }

  async answerCallbackQuery(callbackQueryId: string, text?: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text: text || ''
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error answering callback query:', error);
      return false;
    }
  }

  async forwardMessage(chatId: number | string, fromChatId: number | string, messageId: number): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/forwardMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          from_chat_id: fromChatId,
          message_id: messageId
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error forwarding message:', error);
      return false;
    }
  }

  async editMessageText(chatId: number | string, messageId: number, text: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiBase}${this.botToken}/editMessageText`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text: text,
          parse_mode: 'Markdown'
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error editing message:', error);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É
  async sendNotificationToStudent(tgid: string, message: string): Promise<boolean> {
    return this.sendMessage(tgid, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  async sendNotificationToAdmin(message: string): Promise<boolean> {
    return this.sendMessage(this.adminChatId, message);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (—É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
   */
  private async clearChatHistory(chatId: number, keepLastN: number = 1): Promise<void> {
    try {
      // –í Telegram –Ω–µ–ª—å–∑—è –º–∞—Å—Å–æ–≤–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
      // –ù–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å" –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
      await this.sendMessage(chatId, 'üè† ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      console.log('Chat clear failed (non-critical):', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏
   */
  private async sendMessageWithClearHistory(chatId: number, text: string, keyboard?: InlineKeyboard): Promise<boolean> {
    await this.clearChatHistory(chatId);
    if (keyboard) {
      return this.sendMessageWithKeyboard(chatId, text, keyboard);
    } else {
      return this.sendMessage(chatId, text);
    }
  }
} 