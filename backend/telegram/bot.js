// Telegram Bot - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤

import { jsonResponse, errorResponse } from '../worker.js';

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram webhook
export async function handleTelegramWebhook(request, env) {
  if (request.method !== 'POST') {
    return errorResponse('Method not allowed', 405);
  }

  try {
    const update = await request.json();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ inline queries –∏ —Ç.–¥.)
    if (update.message) {
      await handleMessage(update.message, env);
    } else if (update.document || update.photo) {
      await handleFileUpload(update, env);
    }

    return jsonResponse({ ok: true });
  } catch (error) {
    console.error('Telegram webhook error:', error);
    return errorResponse('Webhook processing failed', 500);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message, env) {
  const chatId = message.chat.id;
  const text = message.text;
  const userId = message.from.id.toString();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–µ–Ω–∏–∫ –≤ –±–∞–∑–µ
  const student = await getStudentByTgId(env.DB, userId);
  
  if (!student) {
    await sendMessage(env, chatId, 
      '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text === '/start') {
    await handleStartCommand(env, chatId, student);
  } else if (text === 'üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è') {
    await handleMyLessonsCommand(env, chatId, student);
  } else if (text === 'üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç') {
    await handleSubmitReportCommand(env, chatId, student);
  } else if (text === 'üìã –ò—Å—Ç–æ—Ä–∏—è') {
    await handleHistoryCommand(env, chatId, student);
  } else {
    await sendMessage(env, chatId, 
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–æ—Ç—á–µ—Ç—ã)
async function handleFileUpload(update, env) {
  const message = update.message;
  const chatId = message.chat.id;
  const userId = message.from.id.toString();

  const student = await getStudentByTgId(env.DB, userId);
  if (!student) {
    await sendMessage(env, chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const currentLesson = await getCurrentLesson(env.DB, student.id);
  if (!currentLesson) {
    await sendMessage(env, chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–¥–∞–≤–∞–ª –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–∫—É
  const existingReport = await getReport(env.DB, student.id, currentLesson.id);
  if (existingReport && existingReport.status !== 'rejected') {
    await sendMessage(env, chatId, '‚ùå –í—ã —É–∂–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–∫—É.');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º file_id –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É
  let fileId;
  if (message.document) {
    fileId = message.document.file_id;
  } else if (message.photo) {
    fileId = message.photo[message.photo.length - 1].file_id; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
  } else {
    await sendMessage(env, chatId, '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É
  await saveReport(env.DB, student.id, currentLesson.id, fileId);

  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
  await forwardReportToAdmin(env, student, currentLesson, fileId, message);

  await sendMessage(env, chatId, 
    '‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.');
}

// –ö–æ–º–∞–Ω–¥–∞ /start
async function handleStartCommand(env, chatId, student) {
  const keyboard = {
    keyboard: [
      ['üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è', 'üìù –°–¥–∞—Ç—å –æ—Ç—á–µ—Ç'],
      ['üìã –ò—Å—Ç–æ—Ä–∏—è']
    ],
    resize_keyboard: true,
    persistent: true
  };

  const welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${student.name}! üëã

–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`;

  await sendMessage(env, chatId, welcomeMessage, keyboard);
}

// –ö–æ–º–∞–Ω–¥–∞ "–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è"
async function handleMyLessonsCommand(env, chatId, student) {
  const currentLesson = await getCurrentLesson(env.DB, student.id);
  
  if (!currentLesson) {
    await sendMessage(env, chatId, 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞!');
    return;
  }

  const course = await getCourse(env.DB, student.course_id);
  const totalLessons = await getTotalLessons(env.DB, student.course_id);

  let message = `üìö –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n`;
  message += `üìñ –ö—É—Ä—Å: ${course.title}\n`;
  message += `üìù –£—Ä–æ–∫ ${student.active_lesson} –∏–∑ ${totalLessons}: ${currentLesson.title}\n\n`;
  
  if (currentLesson.description) {
    message += `üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n${currentLesson.description}\n\n`;
  }

  if (currentLesson.links) {
    const links = JSON.parse(currentLesson.links);
    if (links.length > 0) {
      message += `üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n`;
      links.forEach(link => {
        message += `‚Ä¢ ${link}\n`;
      });
    }
  }

  await sendMessage(env, chatId, message);
}

// –ö–æ–º–∞–Ω–¥–∞ "–°–¥–∞—Ç—å –æ—Ç—á–µ—Ç"
async function handleSubmitReportCommand(env, chatId, student) {
  const currentLesson = await getCurrentLesson(env.DB, student.id);
  
  if (!currentLesson) {
    await sendMessage(env, chatId, 'üéâ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!');
    return;
  }

  const existingReport = await getReport(env.DB, student.id, currentLesson.id);
  if (existingReport && existingReport.status === 'pending') {
    await sendMessage(env, chatId, '‚è≥ –í–∞—à –æ—Ç—á–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.');
    return;
  }

  if (existingReport && existingReport.status === 'approved') {
    await sendMessage(env, chatId, '‚úÖ –í—ã —É–∂–µ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫!');
    return;
  }

  await sendMessage(env, chatId, 
    `üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –ø–æ —É—Ä–æ–∫—É "${currentLesson.title}".\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`);
}

// –ö–æ–º–∞–Ω–¥–∞ "–ò—Å—Ç–æ—Ä–∏—è"
async function handleHistoryCommand(env, chatId, student) {
  const reports = await getStudentReports(env.DB, student.id);
  
  if (reports.length === 0) {
    await sendMessage(env, chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.');
    return;
  }

  let message = 'üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:\n\n';
  
  for (const report of reports) {
    const lesson = await getLesson(env.DB, report.lesson_id);
    const statusEmoji = report.status === 'approved' ? '‚úÖ' : 
                       report.status === 'rejected' ? '‚ùå' : '‚è≥';
    
    message += `${statusEmoji} ${lesson.title}\n`;
    message += `   –°–¥–∞–Ω–æ: ${new Date(report.submitted_at).toLocaleDateString('ru-RU')}\n`;
    
    if (report.admin_comment) {
      message += `   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${report.admin_comment}\n`;
    }
    message += '\n';
  }

  await sendMessage(env, chatId, message);
}

// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
async function forwardReportToAdmin(env, student, lesson, fileId, originalMessage) {
  const course = await getCourse(env.DB, student.course_id);
  
  const caption = `üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n` +
    `üë§ –°—Ç—É–¥–µ–Ω—Ç: ${student.name}\n` +
    `üìñ –ö—É—Ä—Å: ${course.title}\n` +
    `üìù –£—Ä–æ–∫: ${lesson.title}\n` +
    `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`;

  // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–π–ª
  if (originalMessage.document) {
    await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendDocument`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: env.TELEGRAM_ADMIN_ID,
        document: fileId,
        caption: caption
      })
    });
  } else if (originalMessage.photo) {
    await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendPhoto`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: env.TELEGRAM_ADMIN_ID,
        photo: fileId,
        caption: caption
      })
    });
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
export async function notifyStudent(env, studentTgId, lessonTitle, status, comment = null) {
  let message;
  
  if (status === 'approved') {
    message = `‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –ø–æ —É—Ä–æ–∫—É "${lessonTitle}" –ø—Ä–∏–Ω—è—Ç!\n\n–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é.`;
  } else {
    message = `‚ùå –í–∞—à –æ—Ç—á–µ—Ç –ø–æ —É—Ä–æ–∫—É "${lessonTitle}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.`;
    if (comment) {
      message += `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n${comment}`;
    }
    message += '\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.';
  }

  await sendMessage(env, studentTgId, message);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function getStudentByTgId(db, tgId) {
  const stmt = db.prepare('SELECT * FROM students WHERE tg_id = ?');
  const result = await stmt.bind(tgId).first();
  return result;
}

async function getCurrentLesson(db, studentId) {
  const stmt = db.prepare(`
    SELECT l.* FROM lessons l 
    JOIN students s ON s.course_id = l.course_id 
    WHERE s.id = ? AND l."order" = s.active_lesson
  `);
  return await stmt.bind(studentId).first();
}

async function getCourse(db, courseId) {
  const stmt = db.prepare('SELECT * FROM courses WHERE id = ?');
  return await stmt.bind(courseId).first();
}

async function getTotalLessons(db, courseId) {
  const stmt = db.prepare('SELECT COUNT(*) as count FROM lessons WHERE course_id = ?');
  const result = await stmt.bind(courseId).first();
  return result.count;
}

async function getReport(db, studentId, lessonId) {
  const stmt = db.prepare('SELECT * FROM reports WHERE student_id = ? AND lesson_id = ?');
  return await stmt.bind(studentId, lessonId).first();
}

async function getLesson(db, lessonId) {
  const stmt = db.prepare('SELECT * FROM lessons WHERE id = ?');
  return await stmt.bind(lessonId).first();
}

async function saveReport(db, studentId, lessonId, fileId) {
  const stmt = db.prepare(`
    INSERT INTO reports (student_id, lesson_id, telegram_file_id, status) 
    VALUES (?, ?, ?, 'pending')
  `);
  return await stmt.bind(studentId, lessonId, fileId).run();
}

async function getStudentReports(db, studentId) {
  const stmt = db.prepare(`
    SELECT * FROM reports 
    WHERE student_id = ? 
    ORDER BY submitted_at DESC
  `);
  return await stmt.bind(studentId).all();
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(env, chatId, text, keyboard = null) {
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };

  if (keyboard) {
    payload.reply_markup = keyboard;
  }

  await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });
} 